// Code generated by foptgen; DO NOT EDIT.

package entities

import (
	"image/color"

	"github.com/oakmound/oak/v3/alg/floatgeom"
	"github.com/oakmound/oak/v3/collision"
	"github.com/oakmound/oak/v3/event"
	"github.com/oakmound/oak/v3/render"
	"github.com/oakmound/oak/v3/render/mod"
)

type Option func(Generator) Generator

func WithPosition(v floatgeom.Point2) Option {
	return func(s Generator) Generator {
		s.Position = v
		return s
	}
}

func WithDimensions(v floatgeom.Point2) Option {
	return func(s Generator) Generator {
		s.Dimensions = v
		return s
	}
}

func WithSpeed(v floatgeom.Point2) Option {
	return func(s Generator) Generator {
		s.Speed = v
		return s
	}
}

func WithParent(v event.Caller) Option {
	return func(s Generator) Generator {
		s.Parent = v
		return s
	}
}

func WithColor(v color.Color) Option {
	return func(s Generator) Generator {
		s.Color = v
		return s
	}
}

func WithRenderable(v render.Renderable) Option {
	return func(s Generator) Generator {
		s.Renderable = v
		return s
	}
}

func WithScaleRenderable(v *mod.Resampling) Option {
	return func(s Generator) Generator {
		s.ScaleRenderable = v
		return s
	}
}

func WithMod(v mod.Mod) Option {
	return func(s Generator) Generator {
		s.Mod = v
		return s
	}
}

func WithLabel(v collision.Label) Option {
	return func(s Generator) Generator {
		s.Label = v
		return s
	}
}

func WithDrawLayers(v []int) Option {
	return func(s Generator) Generator {
		s.DrawLayers = v
		return s
	}
}

func WithUseMouseTree(v bool) Option {
	return func(s Generator) Generator {
		s.UseMouseTree = v
		return s
	}
}

func WithWithoutCollision(v bool) Option {
	return func(s Generator) Generator {
		s.WithoutCollision = v
		return s
	}
}

func WithChildren(v []Generator) Option {
	return func(s Generator) Generator {
		s.Children = v
		return s
	}
}
